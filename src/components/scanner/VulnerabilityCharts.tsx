import React from 'react';
import { motion } from 'framer-motion';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
} from 'chart.js';
import { Bar, Pie } from 'react-chartjs-2';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { BarChart3, PieChart } from 'lucide-react';
import { Vulnerability } from '../ScannerDashboard';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement
);

interface VulnerabilityChartsProps {
  vulnerabilities: Vulnerability[];
}

export const VulnerabilityCharts: React.FC<VulnerabilityChartsProps> = ({
  vulnerabilities
}) => {
  // Severity distribution data
  const severityData = vulnerabilities.reduce((acc, vuln) => {
    acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const pieData = {
    labels: Object.keys(severityData).map(s => s.charAt(0).toUpperCase() + s.slice(1)),
    datasets: [
      {
        data: Object.values(severityData),
        backgroundColor: [
          'hsl(0, 84%, 60%)',    // Critical - Red
          'hsl(39, 100%, 50%)',  // High - Orange
          'hsl(195, 100%, 47%)', // Medium - Blue
          'hsl(120, 100%, 50%)', // Low - Green
        ],
        borderColor: [
          'hsl(0, 84%, 50%)',
          'hsl(39, 100%, 40%)',
          'hsl(195, 100%, 37%)',
          'hsl(120, 100%, 40%)',
        ],
        borderWidth: 2,
      },
    ],
  };

  // CVSS Score distribution
  const cvssRanges = {
    'Low (0-3.9)': vulnerabilities.filter(v => v.cvssScore < 4).length,
    'Medium (4-6.9)': vulnerabilities.filter(v => v.cvssScore >= 4 && v.cvssScore < 7).length,
    'High (7-8.9)': vulnerabilities.filter(v => v.cvssScore >= 7 && v.cvssScore < 9).length,
    'Critical (9-10)': vulnerabilities.filter(v => v.cvssScore >= 9).length,
  };

  const barData = {
    labels: Object.keys(cvssRanges),
    datasets: [
      {
        label: 'Number of Vulnerabilities',
        data: Object.values(cvssRanges),
        backgroundColor: 'hsl(195, 100%, 47%, 0.6)',
        borderColor: 'hsl(195, 100%, 47%)',
        borderWidth: 2,
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top' as const,
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          stepSize: 1,
        },
      },
    },
  };

  const pieOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top' as const,
      },
    },
  };

  return (
    <div className="space-y-6">
      <div className="grid md:grid-cols-2 gap-6">
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.1 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <PieChart className="h-5 w-5" />
                Severity Distribution
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-80">
                <Pie data={pieData} options={pieOptions} />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.2 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="h-5 w-5" />
                CVSS Score Distribution
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-80">
                <Bar data={barData} options={chartOptions} />
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      {/* Tool Performance Summary */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
      >
        <Card>
          <CardHeader>
            <CardTitle>Tool Performance Summary</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
              {Array.from(new Set(vulnerabilities.map(v => v.toolUsed))).map(tool => {
                const toolVulns = vulnerabilities.filter(v => v.toolUsed === tool);
                const avgCVSS = toolVulns.reduce((sum, v) => sum + v.cvssScore, 0) / toolVulns.length;
                
                return (
                  <div key={tool} className="text-center p-4 bg-secondary/50 rounded-lg">
                    <div className="font-semibold">{tool}</div>
                    <div className="text-2xl font-bold text-primary mt-2">
                      {toolVulns.length}
                    </div>
                    <div className="text-sm text-muted-foreground">
                      Avg CVSS: {avgCVSS.toFixed(1)}
                    </div>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
      </motion.div>
    </div>
  );
};