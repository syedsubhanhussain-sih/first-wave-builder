import React from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { AlertTriangle, Shield, Clock, Target } from 'lucide-react';
import { ScanResults } from '../ScannerDashboard';
import { VulnerabilityCharts } from './VulnerabilityCharts';
import { AttackPathDiagram } from './AttackPathDiagram';

interface VulnerabilityReportProps {
  results: ScanResults;
}

export const VulnerabilityReport: React.FC<VulnerabilityReportProps> = ({
  results
}) => {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'bg-destructive text-destructive-foreground';
      case 'high':
        return 'bg-warning text-warning-foreground';
      case 'medium':
        return 'bg-primary text-primary-foreground';
      case 'low':
        return 'bg-accent text-accent-foreground';
      default:
        return 'bg-secondary text-secondary-foreground';
    }
  };

  const vulnerabilityStats = {
    total: results.vulnerabilities.length,
    critical: results.vulnerabilities.filter(v => v.severity === 'critical').length,
    high: results.vulnerabilities.filter(v => v.severity === 'high').length,
    medium: results.vulnerabilities.filter(v => v.severity === 'medium').length,
    low: results.vulnerabilities.filter(v => v.severity === 'low').length,
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="space-y-6"
    >
      {/* Report Header */}
      <Card className="glass">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Shield className="h-6 w-6 text-primary" />
              <div>
                <CardTitle className="text-xl">Vulnerability Report</CardTitle>
                <p className="text-muted-foreground mt-1">
                  Target: {results.targetUrl}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <Clock className="h-4 w-4" />
              {results.timestamp.toLocaleString()}
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-foreground">{vulnerabilityStats.total}</div>
              <div className="text-sm text-muted-foreground">Total Issues</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-destructive">{vulnerabilityStats.critical}</div>
              <div className="text-sm text-muted-foreground">Critical</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-warning">{vulnerabilityStats.high}</div>
              <div className="text-sm text-muted-foreground">High</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-primary">{vulnerabilityStats.medium}</div>
              <div className="text-sm text-muted-foreground">Medium</div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-accent">{vulnerabilityStats.low}</div>
              <div className="text-sm text-muted-foreground">Low</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Detailed Report Tabs */}
      <Card className="glass">
        <Tabs defaultValue="vulnerabilities" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
            <TabsTrigger value="charts">Analytics</TabsTrigger>
            <TabsTrigger value="attack-paths">Attack Paths</TabsTrigger>
          </TabsList>

          <TabsContent value="vulnerabilities" className="space-y-4 p-6">
            {results.vulnerabilities.map((vulnerability, index) => (
              <motion.div
                key={vulnerability.cveId}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1 }}
              >
                <Card className="border-l-4 border-l-primary">
                  <CardHeader className="pb-3">
                    <div className="flex items-start justify-between">
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <AlertTriangle className="h-4 w-4" />
                          <span className="font-mono text-sm">{vulnerability.cveId}</span>
                          <Badge className={getSeverityColor(vulnerability.severity)}>
                            {vulnerability.severity.toUpperCase()}
                          </Badge>
                          <Badge variant="outline">{vulnerability.toolUsed}</Badge>
                        </div>
                        <CardTitle className="text-lg">{vulnerability.description}</CardTitle>
                      </div>
                      <div className="text-right">
                        <div className="text-2xl font-bold text-foreground">
                          {vulnerability.cvssScore}
                        </div>
                        <div className="text-sm text-muted-foreground">CVSS Score</div>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <h4 className="font-semibold mb-2 flex items-center gap-2">
                        <Target className="h-4 w-4" />
                        Affected Components
                      </h4>
                      <div className="flex flex-wrap gap-2">
                        {vulnerability.affectedComponents.map((component, idx) => (
                          <Badge key={idx} variant="secondary">{component}</Badge>
                        ))}
                      </div>
                    </div>
                    {vulnerability.remediationGuidance && (
                      <div>
                        <h4 className="font-semibold mb-2">Remediation Guidance</h4>
                        <p className="text-sm text-muted-foreground bg-secondary/50 p-3 rounded">
                          {vulnerability.remediationGuidance}
                        </p>
                      </div>
                    )}
                    {vulnerability.exploitSource && (
                      <div>
                        <Badge variant="destructive">
                          Exploit Available: {vulnerability.exploitSource}
                        </Badge>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </TabsContent>

          <TabsContent value="charts" className="p-6">
            <VulnerabilityCharts vulnerabilities={results.vulnerabilities} />
          </TabsContent>

          <TabsContent value="attack-paths" className="p-6">
            <AttackPathDiagram attackPaths={results.attackPaths} />
          </TabsContent>
        </Tabs>
      </Card>
    </motion.div>
  );
};